services:
  db:
    image: postgres:14.11-alpine
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - proxynet

  test_db:
    image: postgres:14.1-alpine
    restart: unless-stopped
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5433:5432'
    networks:
      - proxynet

  backend:
    build:
      context: .
      args:
        INSTALL_COMMUNITY_DEPS: false
      dockerfile: ./src/backend/Dockerfile
    develop:
      watch:
        - action: sync
          path: ./src/backend
          target: /workspace/src/backend
          ignore:
            - __pycache__/
            - alembic/
            - data/
        - action: sync
          path: ./src/community
          target: /workspace/src/community
          ignore:
            - __pycache__/
            - alembic/
            - data/
    stdin_open: true
    tty: true
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    volumes:
      # Mount alembic folder to sync migrations
      - ./src/backend/alembic:/workspace/src/backend/alembic
      # Mount data folder to sync uploaded files
      - ./src/backend/data:/workspace/src/backend/data
    # network_mode: host
    networks:
      - proxynet

  frontend:
    build:
      target: ${BUILD_TARGET:-prod}
      context: ./src/frontend
      dockerfile: Dockerfile
    # Set environment variables directly in the docker-compose file
    environment:
      NEXT_PUBLIC_API_HOSTNAME: ${NEXT_PUBLIC_API_HOSTNAME}
      NEXT_PUBLIC_FRONTEND_HOSTNAME: ${NEXT_PUBLIC_FRONTEND_HOSTNAME}
      NEXT_PUBLIC_DARK_MODE: ${NEXT_PUBLIC_DARK_MODE}
    restart: always
    networks:
      - proxynet
    ports:
      - 4000:4000
    develop:
      watch:
        - action: sync
          path: ./src/frontend
          target: /app
          ignore:
            - node_modules/

volumes:
  db:
    name: markbib_db
    driver: local

networks:
  proxynet:
    name: custom_network